# Context free grammar for validation of parse trees
# Lines starting with # are comments
# Rules ending with '+'  mean 'at least 1'
# Rules ending with '?' are '0 or 1' 
# Rules can inherit base classes with RULE$BASE_CLASS

ROOT: QUERY | COUNT | EXISTS | ISA | ISLESS | ISGREATER | EXISTSRELATION

# PROPERTY is the subject or the object of an RDF triple. The child QUERY or ENTITY+ is the other side of the triple.
# It can have an associated VARIABLE and types
PROPERTY$QUERY: QUERY VARIABLE? TYPE+? | ENTITY+ VARIABLE? TYPE+? | LITERAL TYPE+? VARIABLE? | LITERAL QUERY VARIABLE? | QUERY ENTITY+ TYPE+? VARIABLE?
ENUMERATE$QUERY: TYPE+?

# Picks a random sample from a set of entities (e.g. Give me an example of a tennis player)
SAMPLE$QUERY: QUERY VARIABLE? | TYPE+ VARIABLE?

ARGMAX$QUERY: QUERY VARIABLE? | ENTITY+ VARIABLE? | QUERY QUERY VARIABLE? | QUERY ENTITY VARIABLE? | TYPE+ VARIABLE?
ARGMAXCOUNT$QUERY: QUERY VARIABLE? | ENTITY+ VARIABLE? | TYPE+ VARIABLE?
ARGMINCOUNT$QUERY: QUERY VARIABLE? | ENTITY+ VARIABLE? | TYPE+ VARIABLE?
ARGMIN$QUERY: QUERY VARIABLE? | ENTITY+ VARIABLE? | QUERY QUERY VARIABLE? | QUERY ENTITY VARIABLE? | TYPE+ VARIABLE?
ARGNTH$QUERY: QUERY LITERAL VARIABLE? | TYPE+ LITERAL VARIABLE?

# Cardinal of a set of entities
COUNT: QUERY VARIABLE?

# Returns true if entity set is not empty
EXISTS: QUERY

# Returns true if a property exists between two given entities
EXISTSRELATION: ENTITY ENTITY | QUERY ENTITY | QUERY QUERY | QUERY LITERAL | ENTITY LITERAL

# Returns true if entity set is part of all given
ISA: QUERY TYPE+ | ENTITY+ TYPE+ | ENTITY QUERY

# Returns true if the first entity has a property greater than the second
ISGREATER: ENTITY ENTITY

# Returns true if the first entity has a property less than the second
ISLESS: ENTITY ENTITY

# Filters entity by property value greater than the given literal
GREATER$QUERY: QUERY LITERAL

# Filters entity by property value less than the given literal
LESS$QUERY: QUERY LITERAL

TYPE: TOKEN+
ENTITY: TOKEN+ TYPE+?
LITERAL: TOKEN+
UNUSED: TOKEN+
VARIABLE: TOKEN+